import subprocess
from pathlib import Path
import yaml
import snakemake
import pathlib


SNAKE_DIR = Path(workflow.basedir)
RESOURCES_DIR = config['project_path'] / "resources"
run_path = config['project_path'] / "runs" / config['run_dir']
RESULTS_DIR = run_path / "results"
INPUT_DATA = config['data']
DATA_DIR = run_path / "data"
LOG_DIR = run_path / "logs"


# overwrite config
configfile: config['project_path'] / "config.yaml"


# envvars:
#     "GISAIDR_USERNAME",
#     "GISAIDR_PASSWORD",


include: "rules/query.smk"
include: "rules/combine.smk"
include: "rules/align.smk"
include: "rules/tree.smk"
include: "rules/treetime.smk"


localrules:
    query,


onstart:
    # Print some environment info
    print("Input data:")
    for path in INPUT_DATA:
        print(f"- {path}")
    print("Workflow directories:")
    path_vars = (
        'SNAKE_DIR',
        'RESULTS_DIR',
        'RESOURCES_DIR',
        'LOG_DIR',
    )
    for name in path_vars:
        print(f"\t{name:20s} ➡  {str(globals()[name])}")

    print("Environment:")
    shell = lambda cmd: subprocess.run(cmd, shell=True, stdout=subprocess.PIPE).stdout.decode().rstrip()
    print(f"\t{shell('python --version'):20s} ➡  {shell('which python')}")
    print(f"\t{shell('conda --version'):20s} ➡  {shell('which conda')}")
    print(f"\t{' '.join(('snakemake', shell('snakemake --version'))):20s} ➡  {shell('which snakemake')}")

    # Ensure log directory exists. Required for cluster job submission.
    LOG_DIR.mkdir(exist_ok=True)


rule all:
    input:
        RESULTS_DIR / f"{config['id']}-aligned.fasta.treefile",

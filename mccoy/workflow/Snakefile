import subprocess
from pathlib import Path
import yaml
import snakemake
import pathlib


SNAKE_DIR = Path(workflow.basedir)
PROJECT_DIR = SNAKE_DIR.parent
RESOURCES_DIR = PROJECT_DIR / "resources"
RUN_DIR = PROJECT_DIR / "runs" / config['run_name']
RESULTS_DIR = RUN_DIR / "results"
INPUT_DATA = config['data']
DATA_DIR = RUN_DIR / "data"
LOG_DIR = RUN_DIR / "logs"
ENVS_DIR = SNAKE_DIR / "envs"


# overwrite config
configfile: Path(config['project_path']) / "config.yaml"


include: "rules/combine.smk"
include: "rules/align.smk"
include: "rules/tree.smk"
include: "rules/phytest.smk"
include: "rules/dynamicbeast.smk"


if config['inherit'] == 'None':

    include: "rules/beast.smk"


else:

    include: "rules/onlinebeast.smk"


print(RESOURCES_DIR)


onstart:
    # Print some environment info
    print("Input data:")
    for path in INPUT_DATA:
        print(f"- {path}")
    print("Workflow directories:")
    path_vars = (
        'PROJECT_DIR',
        'SNAKE_DIR',
        'RESOURCES_DIR',
        'RUN_DIR',
        'DATA_DIR',
        'RESULTS_DIR',
        'LOG_DIR',
        'ENVS_DIR',
    )
    for name in path_vars:
        print(f"\t{name:20s} ➡  {str(globals()[name])}")

    print("Environment:")
    shell = lambda cmd: subprocess.run(cmd, shell=True, stdout=subprocess.PIPE).stdout.decode().rstrip()
    print(f"\t{shell('python --version'):20s} ➡  {shell('which python')}")
    print(f"\t{shell('conda --version'):20s} ➡  {shell('which conda')}")
    print(f"\t{' '.join(('snakemake', shell('snakemake --version'))):20s} ➡  {shell('which snakemake')}")

    # Ensure log directory exists. Required for cluster job submission.
    LOG_DIR.mkdir(exist_ok=True)


rule all:
    input:
        expand(rules.beast.output if config['inherit'] == 'None' else rules.onlinebeast.output, id=config['id']),
